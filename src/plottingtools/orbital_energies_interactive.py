import pandas as pd
import plotly.graph_objects as go
import os
import json
import webbrowser
import socket
import threading
import argparse
from dash import Dash, html, dcc, Input, Output, State, ctx

"""
üìå Interactive MO Energy Diagram Script
---------------------------------------
This script visualizes molecular orbital (MO) energy levels interactively
using Plotly Dash. It works with CSV files generated by `getorbs.sh`,
available in the `cc-scripts` GitHub repository.

üîó Related repo: https://github.com/josephzsombor/cc-scripts

üìå Usage Examples:
------------------
1Ô∏è‚É£ Basic Usage:
    python interactive_mo_diagram.py --csv path/to/your_orbitals.csv

2Ô∏è‚É£ Specify Alpha/Beta SOMO MOs:
    python interactive_mo_diagram.py --csv orbitals.csv --alpha-somo 84 --beta-somo 87

3Ô∏è‚É£ Save Energy Window to a Custom JSON File:
    python interactive_mo_diagram.py --csv orbitals.csv --json-out my_energy_window.json
"""

# =============================
# ‚úÖ Argument Parsing
# =============================
parser = argparse.ArgumentParser(description="Interactive MO Energy Diagram")
parser.add_argument("--csv", required=True, help="Path to input CSV file (generated from getorbs.sh)")
parser.add_argument("--alpha-somo", type=int, default=84, help="MO number for alpha SOMO (default: 84)")
parser.add_argument("--beta-somo", type=int, default=87, help="MO number for beta SOMO (default: 87)")
parser.add_argument("--json-out", type=str, default="energy_window.json", help="Filename for saved energy window JSON")

args = parser.parse_args()

# =============================
# ‚úÖ User Inputs
# =============================
csv_file = args.csv
alpha_somo_mo = args.alpha_somo
beta_somo_mo = args.beta_somo
json_filename = args.json_out

# Define x-positions for precise overlap:
x_center = 1.0
overlap_half_shift = 0.1

# =============================
# ‚úÖ Load Data
# =============================
df = pd.read_csv(csv_file)

# Keep MO order! No sorting (MO 0 is lowest energy)
alpha_df = df[df["Spin"] == 0].copy()  # Œ± spin (left)
beta_df = df[df["Spin"] == 1].copy()   # Œ≤ spin (right)

# =============================
# ‚úÖ Helper Function to Build the Plot
# =============================

def create_mo_energy_figure():
    fig = go.Figure()

    # ‚úÖ Plot Œ± Spin (Left, Red / Purple)
    for _, row in alpha_df.iterrows():
        color = "red" if row["NO"] != alpha_somo_mo else "purple"
        fig.add_trace(
            go.Scatter(
                x=[x_center - 0.5 + overlap_half_shift, x_center + overlap_half_shift],
                y=[row["E(eV)"], row["E(eV)"]],
                mode="lines",
                line=dict(color=color, width=4 if color == "purple" else 3),
                hoverinfo="text",
                text=f"MO {int(row['NO'])} Œ±: {row['E(eV)']:.2f} eV",
                showlegend=False
            )
        )

    # ‚úÖ Plot Œ≤ Spin (Right, Green / Blue)
    for _, row in beta_df.iterrows():
        color = "limegreen" if row["NO"] != beta_somo_mo else "blue"
        fig.add_trace(
            go.Scatter(
                x=[x_center - overlap_half_shift, x_center + 0.5 - overlap_half_shift],
                y=[row["E(eV)"], row["E(eV)"]],
                mode="lines",
                line=dict(color=color, width=4 if color == "blue" else 3),
                hoverinfo="text",
                text=f"MO {int(row['NO'])} Œ≤: {row['E(eV)']:.2f} eV",
                showlegend=False
            )
        )

    # ‚úÖ Customize Layout
    fig.update_layout(
        title="Molecular Orbital Energy Diagram (Interactive)",
        xaxis=dict(showticklabels=False, range=[0.5, 2.0], zeroline=False),
        yaxis=dict(title="Orbital Energy (eV)"),
        plot_bgcolor="white",
        hovermode="closest",
        width=800,
        height=800
    )
    
    return fig

# =============================
# ‚úÖ Dash App Setup
# =============================

fig = create_mo_energy_figure()

app = Dash(__name__)
app.layout = html.Div([
    dcc.Graph(id='mo-energy-plot', figure=fig, config={'scrollZoom': True}),
    html.Button("Save Energy Window", id="save-window", n_clicks=0),
    html.Div(id='output-message', style={'margin-top': '10px', 'color': 'green'})
])

# =============================
# ‚úÖ Save Energy Window Callback
# =============================

@app.callback(
    Output('output-message', 'children'),
    Input('save-window', 'n_clicks'),
    State('mo-energy-plot', 'relayoutData')
)
def save_energy_window(n_clicks, relayout_data):
    if n_clicks > 0:
        if not ctx.triggered:
            return ""

        # Default full range as fallback
        energy_min = alpha_df["E(eV)"].min()
        energy_max = alpha_df["E(eV)"].max()

        # Check for yaxis zoom range in relayout data
        if relayout_data:
            y_min = relayout_data.get('yaxis.range[0]')
            y_max = relayout_data.get('yaxis.range[1]')
            if y_min is not None and y_max is not None:
                energy_min = y_min
                energy_max = y_max

        energy_range = {
            "energy_min": energy_min,
            "energy_max": energy_max
        }

        # ‚úÖ Save relative to the script location
        script_dir = os.path.dirname(os.path.abspath(__file__))
        output_path = os.path.join(script_dir, json_filename)

        try:
            with open(output_path, "w") as f:
                json.dump(energy_range, f, indent=4)
            print(f"‚úÖ Successfully saved energy window JSON to {output_path}")
            return f"Energy window saved: {energy_min:.2f} eV to {energy_max:.2f} eV"
        except Exception as e:
            print(f"‚ùå Error saving JSON: {e}")
            return f"Error saving energy window: {e}"

    return ""

# =============================
# ‚úÖ Helper: Find Available Port
# =============================

def find_open_port(start_port=8050, max_port=8100):
    port = start_port
    while port <= max_port:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            if s.connect_ex(('localhost', port)) != 0:
                return port
        port += 1
    raise RuntimeError("No available port found.")

# =============================
# ‚úÖ Run App with Auto Port & Browser
# =============================

if __name__ == '__main__':
    selected_port = find_open_port()

    def open_browser():
        webbrowser.open_new(f"http://127.0.0.1:{selected_port}/")

    threading.Timer(1.0, open_browser).start()

    print(f"Running Dash app on http://127.0.0.1:{selected_port}")
    app.run_server(debug=False, port=selected_port)