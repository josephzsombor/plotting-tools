import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D
import argparse
import json
import os

# =============================
# ✅ Argument Parsing
# =============================
parser = argparse.ArgumentParser(
    description="""
Plot a Molecular Orbital (MO) Energy Diagram from CSV output.
This tool expects CSV files generated by 'getorbs.sh' (see: https://github.com/josephzsombor/cc-scripts/blob/newstart/hfx/getorbs.sh).

It creates a MO energy ladder with alpha and beta spins plotted on opposite sides,
and highlights user-specified SOMOs.

You can specify:
- MO number range to plot
- Energy window (via JSON or manual limits)
    - JSON file can be created with 'orbital_energies_interactive.py' (see: https://github.com/josephzsombor/plotting-tools/blob/main/src/plottingtools/orbital_energies_interactive.py)
    """,
    formatter_class=argparse.RawTextHelpFormatter
)

# Required arguments
parser.add_argument('--csv', type=str, required=True, help='CSV file from getorbs.sh')
parser.add_argument('--min-mo', type=int, required=True, help='Minimum MO number to plot (inclusive)')
parser.add_argument('--max-mo', type=int, required=True, help='Maximum MO number to plot (inclusive)')
parser.add_argument('--alpha-somo', type=int, required=True, help='Alpha SOMO MO number')
parser.add_argument('--beta-somo', type=int, required=True, help='Beta SOMO MO number')

# Optional arguments
parser.add_argument('--energy-window', type=str, help='JSON file with energy_min and energy_max')
parser.add_argument('--energy-min', type=float, help='Manual minimum energy (eV) for y-axis')
parser.add_argument('--energy-max', type=float, help='Manual maximum energy (eV) for y-axis')
parser.add_argument('--save', type=str, help='Save plot to file (PNG/SVG/PDF); if omitted, will display instead.')

args = parser.parse_args()

# =============================
# ✅ Load and Filter Data
# =============================
if not os.path.exists(args.csv):
    print(f"❌ Error: CSV file '{args.csv}' not found!")
    exit(1)

df = pd.read_csv(args.csv)

# Filter by MO number range
alpha_df = df[(df["Spin"] == 0) & (df["NO"] >= args.min_mo) & (df["NO"] <= args.max_mo)].copy()
beta_df  = df[(df["Spin"] == 1) & (df["NO"] >= args.min_mo) & (df["NO"] <= args.max_mo)].copy()

# =============================
# ✅ Determine Energy Range (Hybrid Logic)
# =============================
# Defaults from filtered MO energies
default_energy_min = min(alpha_df["E(eV)"].min(), beta_df["E(eV)"].min())
default_energy_max = max(alpha_df["E(eV)"].max(), beta_df["E(eV)"].max())

energy_min = default_energy_min
energy_max = default_energy_max

# Priority: manual args > JSON > default
if args.energy_min is not None and args.energy_max is not None:
    energy_min = args.energy_min
    energy_max = args.energy_max
    print(f"✅ Using manual energy limits: {energy_min:.2f} eV to {energy_max:.2f} eV")

elif args.energy_window:
    if not os.path.exists(args.energy_window):
        print(f"❌ Error: Energy window JSON '{args.energy_window}' not found!")
        exit(1)

    with open(args.energy_window, 'r') as f:
        window_data = json.load(f)

    energy_min = window_data.get("energy_min", default_energy_min)
    energy_max = window_data.get("energy_max", default_energy_max)
    print(f"✅ Using energy window from JSON: {energy_min:.2f} eV to {energy_max:.2f} eV")

else:
    print(f"✅ Using default energy range from MO data: {energy_min:.2f} eV to {energy_max:.2f} eV")

# =============================
# ✅ Plot Settings
# =============================
x_center = 1.25
overlap_half_shift = 0.125

alpha_label_offset = -0.08
beta_label_offset = 0.08

# =============================
# ✅ Create Matplotlib Plot
# =============================
fig, ax = plt.subplots(figsize=(8, 10))

# ✅ Plot Alpha Orbitals (Left)
for _, row in alpha_df.iterrows():
    color = "red" if row["NO"] != args.alpha_somo else "purple"
    linewidth = 3 if row["NO"] != args.alpha_somo else 4

    # Horizontal line
    ax.plot(
        [x_center - 0.5 + overlap_half_shift, x_center + overlap_half_shift],
        [row["E(eV)"], row["E(eV)"]],
        color=color,
        linewidth=linewidth
    )

    # Label
    ax.text(
        x_center - 0.5 + overlap_half_shift + alpha_label_offset,
        row["E(eV)"],
        f"$\\alpha$-{int(row['NO'])}",
        ha='right',
        va='center',
        fontsize='small',
        color=color
    )

# ✅ Plot Beta Orbitals (Right)
for _, row in beta_df.iterrows():
    color = "limegreen" if row["NO"] != args.beta_somo else "blue"
    linewidth = 3 if row["NO"] != args.beta_somo else 4

    ax.plot(
        [x_center - overlap_half_shift, x_center + 0.5 - overlap_half_shift],
        [row["E(eV)"], row["E(eV)"]],
        color=color,
        linewidth=linewidth
    )

    ax.text(
        x_center + 0.5 - overlap_half_shift + beta_label_offset,
        row["E(eV)"],
        f"$\\beta$-{int(row['NO'])}",
        ha='left',
        va='center',
        fontsize='small',
        color=color
    )

# =============================
# ✅ Customize Plot Appearance
# =============================
ax.set_ylim(energy_min, energy_max)
ax.set_xlim(-0.5, 3.0)

ax.set_xlabel('')
ax.set_ylabel('Orbital Energy (eV)')
ax.set_title('Molecular Orbital Energy Diagram')

ax.set_xticks([])

# ✅ Grid and layout
ax.grid(True, linestyle='--', alpha=0.5)
plt.tight_layout()

# =============================
# ✅ Save or Show Plot
# =============================
if args.save:
    outfile = args.save
    ext = os.path.splitext(outfile)[1].lower()

    if ext not in ['.png', '.svg', '.pdf']:
        print("❌ Unsupported format! Use .png, .svg, or .pdf")
        exit(1)

    plt.savefig(outfile)
    print(f"✅ Plot saved to {outfile}")

else:
    plt.show()